name: 'Frontend CI/CD Pipeline'

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch:

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '8'
  
jobs:
  pre-checks:
    name: 'Pre-flight Checks'
    runs-on: ubuntu-latest
    outputs:
      should-deploy: ${{ steps.check-branch.outputs.should-deploy }}
      git-sha: ${{ steps.vars.outputs.git-sha }}
      timestamp: ${{ steps.vars.outputs.timestamp }}
    steps:
      - name: '[INFO] : Checkout repository'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: '[INFO] : Set pipeline variables'
        id: vars
        run: |
          echo "[INFO] : Setting pipeline variables"
          echo "git-sha=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          echo "timestamp=$(date -u +%Y%m%d-%H%M%S)" >> $GITHUB_OUTPUT

      - name: '[INFO] : Check deployment eligibility'
        id: check-branch
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" || "${{ github.ref }}" == "refs/heads/master" ]]; then
            echo "[INFO] : Branch eligible for deployment"
            echo "should-deploy=true" >> $GITHUB_OUTPUT
          else
            echo "[INFO] : Branch not eligible for deployment"
            echo "should-deploy=false" >> $GITHUB_OUTPUT
          fi

  build-test:
    name: 'Build & Test'
    runs-on: ubuntu-latest
    needs: pre-checks
    steps:
      - name: '[INFO] : Checkout repository'
        uses: actions/checkout@v4

      - name: '[INFO] : Setup Node.js and pnpm'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: '[INFO] : Install pnpm'
        run: |
          echo "[INFO] : Installing pnpm ${{ env.PNPM_VERSION }}"
          npm install -g pnpm@${{ env.PNPM_VERSION }}

      - name: '[INFO] : Install dependencies'
        run: |
          echo "[INFO] : Installing project dependencies"
          pnpm install
          echo "[INFO] : Dependencies installed successfully"

      - name: '[INFO] : Run linting'
        run: |
          echo "[INFO] : Running ESLint checks"
          pnpm lint || {
            echo "[WARN] : Linting had issues but continuing"
          }

      - name: '[INFO] : Build application'
        run: |
          echo "[INFO] : Building Next.js application"
          pnpm build
          echo "[INFO] : Build completed successfully"

      - name: '[INFO] : Upload build artifacts'
        if: success() && needs.pre-checks.outputs.should-deploy == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build-${{ needs.pre-checks.outputs.git-sha }}
          path: |
            .next/
            public/
            package.json
          retention-days: 7

  deploy:
    name: 'Deploy to Production'
    runs-on: ubuntu-latest
    needs: [pre-checks, build-test]
    if: needs.pre-checks.outputs.should-deploy == 'true'
    environment:
      name: production
      url: 'https://your-frontend-domain.com'
    steps:
      - name: '[INFO] : Checkout repository'
        uses: actions/checkout@v4

      - name: '[INFO] : Validate deployment secrets'
        run: |
          echo "[INFO] : Validating required secrets"
          if [[ -z "${{ secrets.VPS_HOST }}" ]]; then
            echo "[FATAL] : VPS_HOST secret is missing"
            exit 1
          fi
          echo "[INFO] : All required secrets are present"

      - name: '[INFO] : Deploy to VPS'
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT }}
          command_timeout: 15m
          script: |
            set -e
            
            echo "[INFO] : Starting frontend deployment"
            echo "[INFO] : Git SHA: ${{ needs.pre-checks.outputs.git-sha }}"
            
            cd /home/kizovps/kizo/frontend || {
              echo "[FATAL] : Cannot access frontend directory"
              exit 1
            }
            
            echo "[INFO] : Pulling latest changes"
            git fetch origin && git reset --hard origin/master
            
            echo "[INFO] : Building Docker image"
            sudo docker build -t kizo-frontend:latest .
            
            echo "[INFO] : Stopping old container"
            sudo docker stop kizo-frontend 2>/dev/null || true
            sudo docker rm kizo-frontend 2>/dev/null || true
            
            echo "[INFO] : Starting new container"
            sudo docker run -d \
              --name kizo-frontend \
              --network host \
              --restart unless-stopped \
              kizo-frontend:latest
            
            echo "[INFO] : Verifying deployment"
            sleep 10
            if sudo docker ps | grep -q kizo-frontend; then
              echo "[INFO] : Frontend deployment successful"
            else
              echo "[ERROR] : Frontend deployment failed"
              exit 1
            fi

  cleanup:
    name: 'Cleanup'
    runs-on: ubuntu-latest
    needs: [pre-checks, deploy]
    if: always()
    steps:
      - name: '[INFO] : Pipeline cleanup'
        run: |
          echo "[INFO] : Frontend pipeline completed"
          echo "[INFO] : Status: ${{ needs.deploy.result || 'skipped' }}"
